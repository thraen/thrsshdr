#line 2

// const int  M = 8;
// const int  N = 18;
// const int[M][N] A = {
//     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//     {0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
//     {0,0,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,0},
//     {0,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0},
//     {0,0,1,0,0,1,1,1,0,1,1,1,0,1,0,1,0,0},
//     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
// };


// const int  M = 8;
// const int  N = 27;
// const int[M][N] A = {
//     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//     {0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
//     {0,0,0,1,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0},
//     {0,0,0,1,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0},
//     {0,0,0,1,0,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0},
//     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
// };
//
//
// const int  M = 8;
// const int  N = 33;
// const int[M][N] A = {
//     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//     {0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
//     {0,1,1,0,1,1,1,0,1,1,0,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0},
//     {0,1,0,0,1,0,1,0,1,0,0,0,1,0,0,1,0,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0},
//     {0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0},
//     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
//     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0},
//     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
// };
// const uint  M = 3;
// const uint  N = 3;
// const int[M][N] A = {
//     {0,1,0},
//     {0,1,1},
//     {0,0,0}
// };

const int  M = 8;
const int  N = 94;
const int[M][N] A = {
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,1,1,0,1,0,0,1,1,1,0,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};


float  t  = 0.001*(_elapsed_t);
float  wt = 0.001*(_elapsed_t%6000 - 3000);

void main() {
    float x = cc.x ;

    float y = cc.y 
            // wave 
//               + 0.2*sin(x-(0*sumf[20]+2*t))
    ;
//     float y = (1 - tc.y);

    float f  = 1;
    float z0 = 3;
    float z;

//     float ssum = sumf[1] +sumf[2] +sumf[3] +sumf[4] +sumf[5] +sumf[6] +sumf[7] +sumf[8] +sumf[9] 
//         ;

    float t_ = 
//         1/(0.002*ssum + 0.001) *
        0.5*(
        + 0.012* sumf[13] 
        + 0.012* sumf[12] 
        + 0.010* sumf[11] 
              + 0.001*sumf[10]
              + 0.001*sumf[9]
              + 0.010*sumf[8]
              + 0.010*sumf[7]
              + 0.010*sumf[6]
              + 0.012*sumf[5]
              + 0.012*sumf[4]
              + 0.022*sumf[3]
              + 0.022*sumf[2]
              + 0.012*sumf[1]
        )
              ;


    // wave packet
    float env = 1.0*exp( -200*(tc.x-t_)*(tc.x-t_));
    float pkg = 1.0*sin( ( tc.x - t_ )/0.01 );

 /// radius of cylinder
    float R = 1.100000 
//         *(sin(0.001*t));
// 		*(1.1*sin(10*t))
// 		+  env * pkg
        // dispersion
//         * sqrt(t_)
        ;

    float R_2 = R*R;
    float R_3 = R_2*R;
    float R_4 = R_2*R_2;

    float y_2 = y*y;
    float z0_2 = z0*z0;

    // calculate azimuth from projection y
    float a = -acos( ( R_2*y_2 + R*y_2*z0 + sqrt(R_4 - 2*R_3*y_2*z0 - R_2*y_2*z0_2))
            / ( R_2 + R_2 * y_2 )
			)
    // remove artifact 
        -0.0001 
        ;

    z = z0 - R*( 1-cos(a) );

    float sum = E[3] + E[2] + E[1] + E[0];
    x = x* f/z
        + 1*mod(0.000020*t,100) 
        +1.5*t_
        + 2/(sum+0.001)*(
        + 0.0015*E[3]*sin(300.0*a)  /// x - jitter
        + 0.0015*E[2]*sin(160.0*a)  /// x - jitter
        + 0.0010*E[1]*sin(40.0*a)  /// x - jitter
        + 0.0010*E[0]*sin(20.0*a)  /// x - jitter
        )
        ;

	a = -tc.y
        + 0.1*sin(0.002*t-2*x);
        ;

    int j = int( floor(x*N) + 0*t ) % (N);
    int i = int( floor(a*M) + 0*((j)/4)  ) % M;

//     float m = float( (i+j) %2 );
    float m = A[i][j];
//     float m = float(i == 1 && j==0);


    float c = a*a ;
    color = vec4(m-c,m-c,m-c,1);

//     vec3 c = rainbow(0.001*(_elapsed_t + 1000*i + 100*j) );
//     vec3 c = rainbow(4*schwerpunkt);
//     color = vec4(m-c.r, m-c.g, m-c.b, 1);
//     color = vec4(m,m,m,1);

}
